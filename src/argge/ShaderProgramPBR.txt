#ifdef VERTEX
    attribute vec3 a_Position;
    attribute vec2 a_TexCoord;
    uniform mat4 u_Projection;
    uniform mat4 u_Model;
	uniform mat4 u_View;
    varying vec2 v_TexCoord;
	varying vec3 v_Position;
	//varying vec3 a_Normal;
    
    void main()
    {
		gl_Position = u_Projection *u_View* u_Model * vec4(a_Position, 1);
		//if(a_Normal.x > 999) gl_Position.x = 1;
        v_TexCoord = a_TexCoord;
		v_Position = a_Position;
    }

#endif
	
#ifdef FRAGMENT
	varying vec3 v_Position;
	uniform mat4 u_Model;
	
	varying vec4 fragColour;
	varying vec2 v_TexCoord;
	vec3 worldPos = vec3(u_Model * vec4(v_Position,1));
	
	//material parameters
	//uniform sampler2D texture;
	//uniform sampler2D height;
	uniform sampler2D tex_albedo;
	uniform sampler2D tex_ao;
	uniform sampler2D tex_metalness;
	uniform sampler2D tex_roughness;
	uniform sampler2D tex_normal;
	
	vec3 albedo = texture2D(tex_albedo, v_TexCoord).xyz;
	vec3 ao = texture2D(tex_ao, v_TexCoord).xyz;
	vec3 metalness = texture2D(tex_metalness, v_TexCoord).xyz;
	vec3 roughness = texture2D(tex_roughness, v_TexCoord).xyz;
	vec3 normal = texture2D(tex_normal, v_TexCoord).xyz;

	//uniform vec3 u_camPos;

	//Lights
	int nooLights = 1;
	vec3 lightPosition = vec3(3,0,-5);
	vec3 lightColor = vec3(23.47, 21.31, 20.79);

	//Cameras
	vec3 camPos = vec3(0.0, 0.0, 0.0);

	//Fancy values that are related to roughness
	const float PI = 3.14159265359;
	float DistributionGGX(vec3 N, vec3 H, float roughness);
	float GeometrySchlickGGX(float NdotV, float roughness);
	float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
	vec3 fresnelSchlick(float cosTheta, vec3 F0);

	void main()
	{
		//if(v_Normal.x == 9999){lightColor.x = 22;}
		//gl_FragColor = texture2D(texture, v_TexCoord);
		//if(gl_FragColor.x == 9) gl_FragColor.x = v_Normal.x;
		vec3 N = normalize(normal);
		vec3 V = normalize( camPos - worldPos);

		vec3 F0 = vec3(0.04);
		F0 = mix(F0, albedo, metalness);

		//reflectance equation
		vec3 Lo = vec3(0.04);
		for(int i = 0; i < nooLights; i++)
		{
		   //calculate per light radiance
			vec3 L = normalize(lightPosition - worldPos);
			vec3 H = normalize(V + L);
			float distance = length(lightPosition - worldPos);
			
			//vec3  wi          = normalize(lightPosition - v_TexCoord);
			//float cosTheta    = max(dot(N, wi.xy), 0.0);
			//float attenuation = calculateAttenuation(v_TexCoord, lightPosition);
			
			float attenuation = 1.0 / (distance * distance);
			vec3 radiance = lightColor * attenuation;// *cosTheta;

			//cook torrance brdf
			float NDF = DistributionGGX(N, H, 1.0 - roughness.x); //texture2D(roughness, v_TexCoord).xyz (im hard coding in roughness for now)
			float G = GeometrySmith(N, V, L, 1.0 - roughness.x);
			vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);
	
			vec3 kS = F;
			vec3 kD = vec3(1.0) - kS;
			kD *= metalness;
	
			vec3 numerator = NDF * G * F;
			float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
			vec3 specular = numerator / max(denominator, 0.001);
	
			//add to outgoing radiance Lo
			float NdotL = max(dot(N, L), 0.0);
			Lo += (kD * albedo / PI + specular) * radiance * NdotL;
	   }

	   vec3 ambient = vec3(0.03) * albedo * ao; 
	   vec3 color = ambient + Lo;

	   color = color / (color + vec3(1.0));
	   color = pow(color, vec3(1.0/2.2));

	   gl_FragColor = vec4(color, 1.0);
	}

	float DistributionGGX(vec3 N, vec3 H, float roughness)
	{
	   float a = roughness * roughness;
	   float a2 = a * a;
	   float NdotH = max(dot(N, H), 0.0);
	   float NdotH2 = NdotH * NdotH;

	   float num = a2;
	   float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	   denom = PI * denom * denom;

	   return num / denom;
	}

	float GeometrySchlickGGX(float NdotV, float roughness)
	{
	   float r = (roughness + 1.0);
		float k = (r * r) / 8.0;

		float num = NdotV;
		float denom = NdotV * (1.0 - k) + k;

		return num / denom;
	}

	float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
	{
		float NdotV = max(dot(N, V), 0.0);
		float NdotL = max(dot(N, L), 0.0);
		float ggx2 = GeometrySchlickGGX(NdotV, roughness);
		float ggx1 = GeometrySchlickGGX(NdotL, roughness);

		return ggx1 * ggx2;
	}

	vec3 fresnelSchlick(float cosTheta, vec3 F0)
	{
		return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
	}
#endif