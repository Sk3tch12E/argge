#ifdef VERTEX
    attribute vec3 a_Position;
    attribute vec2 a_TexCoord;
    uniform mat4 u_Projection;
    uniform mat4 u_Model;
	uniform mat4 u_View;
	uniform vec3 u_CamPos;
	uniform vec3 u_lightPos;
    varying vec2 v_TexCoord;
	varying vec3 v_Position;
	attribute vec3 a_Normal;
	varying vec3 v_Normal;
    attribute vec3 a_Tangent;
	attribute vec3 a_BTangent;
	varying vec3 v_CamPos;
	varying vec3 v_lightPos;
	varying mat3 v_TBN;	
	varying vec3 v_worldPos;
	
    void main()
    {
		//T B N = t b n * model		
		//vec3 T = normalize(vec3(u_Model * vec4(a_Tangent, 0.0)));
		vec3 B = normalize(vec3(u_Model * vec4(a_BTangent, 0.0)));
		//vec3 N = normalize(vec3(u_Model * vec4(a_Normal, 0.0)));
		vec3 T = normalize(vec3(u_Model * vec4(a_Tangent, 0.0)));
		vec3 N = normalize(vec3(u_Model * vec4(a_Normal, 0.0)));
		// re-orthogonalize T with respect to N
		T = normalize(T - dot(T, N) * N);
		// then retrieve perpendicular vector B with the cross product of T and N
		//vec3 B = cross(N, T);
		//TBN  make them a mat3
		//transpose the matrix
		mat3 TBN = mat3(T, B, N);
		
		//TBN = transpose(TBN);
		//* the light, cam, frag by new matrix			
		if(u_lightPos.x == 99999.0){u_CamPos.x = 10.0;}
		if(u_CamPos.x == 99999.0){u_lightPos.x = 10.0;}
		v_lightPos =u_CamPos * TBN;// u_lightPos * TBN;//
		v_CamPos = u_CamPos * TBN;
		v_Position = a_Position* TBN;
		
		v_worldPos = TBN * vec3(u_Model * vec4(a_Position,1.0));
		//v_Normal = a_Normal;
		
		
		if(a_Normal.x == 999){v_Position.x = 999;}
		gl_Position = u_Projection *u_View* u_Model * vec4(a_Position, 1);
		v_TexCoord = a_TexCoord;
		v_TBN = TBN;
    }

#endif
	
#ifdef FRAGMENT
	uniform mat4 u_Model;
	varying vec4 fragColour;
	varying vec2 v_TexCoord;
	varying vec3 v_worldPos; 
	varying mat3 v_TBN;
	//material parameters
	//uniform sampler2D texture;
	uniform sampler2D tex_height;
	uniform sampler2D tex_albedo;
	uniform sampler2D tex_ao;
	uniform sampler2D tex_metalness;
	uniform sampler2D tex_roughness;
	uniform sampler2D tex_normal;
	
	vec3 albedo = texture2D(tex_albedo, v_TexCoord).xyz;
	float ao = texture2D(tex_ao, v_TexCoord).x;
	float metalness = texture2D(tex_metalness, v_TexCoord).x;
	float roughness = texture2D(tex_roughness, v_TexCoord).x;
	vec3 normal = texture2D(tex_normal, v_TexCoord).xyz;
	vec3 height = texture2D(tex_height, v_TexCoord).xyz;
	
	//Lights
	int nooLights = 1;
	varying vec3 v_lightPos;
	vec3 lightColors = vec3(23.47, 21.31, 20.79);

	//Cameras
	varying vec3 v_CamPos;

	//Fancy values that are related to roughness
	const float PI = 3.14159265359;
	float DistributionGGX(vec3 N, vec3 H, float roughness);
	float GeometrySchlickGGX(float NdotV, float roughness);
	float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
	vec3 fresnelSchlick(float cosTheta, vec3 F0);

	void main()
	{	
		albedo.x = pow(albedo.x, 2.2);
		albedo.y = pow(albedo.y, 2.2);
		albedo.z = pow(albedo.z, 2.2);
		if(v_lightPos.x == 99999.0){roughness = 10.0;} //stop a_light pos from being removed
		//vec3 lightPositions;
		//lightPositions= v_CamPos;
		//metalness = 1.0 - metalness;
		normal = normal * 2.0 - 1.0;
		vec3 N = normalize(normal);// * v_TBN
		vec3 V = normalize(v_CamPos - v_worldPos);

		vec3 F0 = vec3(0.04); 
		F0 = mix(F0, albedo, metalness);
				   
		// reflectance equation
		vec3 Lo = vec3(0.0);
		for(int i = 0; i < nooLights; ++i) 
		{
			// calculate per-light radiance
			vec3 L = normalize(v_lightPos - v_worldPos);
			vec3 H = normalize(V + L);
			float distance    = length(v_lightPos - v_worldPos);
			float attenuation = 1.0 / (distance * distance);
			vec3 radiance     = lightColors * attenuation;        
			
			// cook-torrance brdf
			float NDF = DistributionGGX(N, H, roughness);        
			float G   = GeometrySmith(N, V, L, roughness);      
			vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);       
			
			vec3 kS = F;
			vec3 kD = vec3(1.0) - kS;
			kD *= 1.0 - metalness;	  
			
			vec3 numerator    = NDF * G * F;
			float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
			vec3 specular     = numerator / max(denominator, 0.001);  
				
			// add to outgoing radiance Lo
			float NdotL = max(dot(N, L), 0.0);                
			Lo += (kD * albedo / PI + specular) * radiance * NdotL; 
		}   
	  
		vec3 ambient = vec3(0.03) * albedo * ao;
		vec3 color = ambient + Lo;
		
		color = color / (color + vec3(1.0));
		color = pow(color, vec3(1.0/2.2));  
	   
		gl_FragColor = vec4(color, 1);
	}  

	float DistributionGGX(vec3 N, vec3 H, float roughness)
	{
	   float a = roughness * roughness;
	   float a2 = a * a;
	   float NdotH = max(dot(N, H), 0.0);
	   float NdotH2 = NdotH * NdotH;

	   float num = a2;
	   float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	   denom = PI * denom * denom;

	   return num / denom;
	}

	float GeometrySchlickGGX(float NdotV, float roughness)
	{
	   float r = (roughness + 1.0);
		float k = (r * r) / 8.0;

		float num = NdotV;
		float denom = NdotV * (1.0 - k) + k;

		return num / denom;
	}

	float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
	{
		float NdotV = max(dot(N, V), 0.0);
		float NdotL = max(dot(N, L), 0.0);
		float ggx2 = GeometrySchlickGGX(NdotV, roughness);
		float ggx1 = GeometrySchlickGGX(NdotL, roughness);

		return ggx1 * ggx2;
	}

	vec3 fresnelSchlick(float cosTheta, vec3 F0)
	{
		return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
	}
#endif