#ifdef VERTEX
    attribute vec3 a_Position;
    attribute vec2 a_TexCoord;
	attribute vec3 a_Normal;
	attribute vec3 a_Tangent;
	attribute vec3 a_BTangent;
	
    uniform mat4 u_Projection;
    uniform mat4 u_Model;
	uniform mat4 u_View;
	uniform vec3 u_CamPos;
	uniform vec3 u_lightPos;
	
    varying vec2 v_TexCoord;
	varying vec3 v_Position;
	varying vec3 v_Normal;
	varying vec3 v_CamPos;
	varying vec3 v_lightPos;
	varying mat3 v_TBN;	
	varying vec3 v_FragPos;
	
    void main()
    {
		gl_Position = u_Projection * u_View * u_Model  * vec4(a_Position, 1.0);
		
		vec3 T = normalize(vec3(u_Model * vec4(a_Tangent, 0.0)));
		vec3 B = normalize(vec3(u_Model * vec4(a_BTangent, 0.0)));
		vec3 N = normalize(vec3(u_Model * vec4(a_Normal,    0.0)));
		mat3 TBN = transpose(mat3(T, B, N));
		v_TBN = TBN;
		
		v_FragPos = vec3(u_Model * vec4(a_Position, 1.0));
		v_TexCoord = a_TexCoord * 2;
		v_Normal = normalize(a_Normal);
		
		v_CamPos =TBN * u_CamPos;

		v_lightPos = TBN * u_lightPos;//u_CamPos * TBN; vec3(0,0,0)
    }

#endif
	
#ifdef FRAGMENT
	varying vec4 fragColour;
	varying vec2 v_TexCoord;
	varying vec3 v_FragPos; 
	varying mat3 v_TBN;
	
	//material parameters
	//uniform sampler2D texture;
	uniform sampler2D tex_height;
	uniform sampler2D tex_albedo;
	uniform sampler2D tex_ao;
	uniform sampler2D tex_metalness;
	uniform sampler2D tex_roughness;
	uniform sampler2D tex_normal;
		
	//Lights
	uniform int nooLights;
	uniform vec3 lightColors;
	varying vec3 v_lightPos;

	//Cameras
	varying vec3 v_CamPos;

	//Fancy values that are related to roughness
	const float PI = 3.14159265359;
	float DistributionGGX(vec3 N, vec3 H, float roughness);
	float GeometrySchlickGGX(float NdotV, float roughness);
	float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
	vec3 fresnelSchlick(vec3 H, vec3 V, vec3 F0);

	void main()
	{	
		vec3 albedo = texture2D(tex_albedo, v_TexCoord).xyz;
		vec3 normal = texture2D(tex_normal, v_TexCoord).xyz;
		vec3 height = texture2D(tex_height, v_TexCoord).xyz;
		float ao = texture2D(tex_ao, v_TexCoord).x;
		float metalness = texture2D(tex_metalness, v_TexCoord).x;
		float roughness = texture2D(tex_roughness, v_TexCoord).x;
				
		albedo.x = pow(albedo.x, 2.2);
		albedo.y = pow(albedo.y, 2.2);
		albedo.z = pow(albedo.z, 2.2);
		
		//roughness = 1.0 - roughness;
		//metalness = 1.0 - metalness;
		
		vec3 N  = normalize(normal * 2.0 - 1.0 ); 
		
		vec3 F0 = vec3(0.04);
		F0 = mix(F0, albedo, metalness);
		vec3 Lo = vec3(0.0);
		
		//vec3 Wo  = V
		//vec3 Wi = normalize(lightpos - v_TanFragPos);
		
		for(int i = 0; i < 1; ++i) 
		{
			vec3 V = normalize(v_CamPos - v_FragPos);
			vec3 L = normalize(v_lightPos- v_FragPos );
			
			float cosTheta = max(dot(N, L), 0.0001);
			vec3 H = normalize(V + L);
			float distance    = length(v_lightPos - v_FragPos);
			float attenuation = 1.0 / (distance * distance);
			vec3 radiance     = lightColors * attenuation; 
			
			float D   = DistributionGGX(N, H, roughness);   
			float G   = GeometrySmith(N, V, L, roughness);   		
			vec3 F    = fresnelSchlick(H, V, F0);
			
			vec3 kS = F;
			vec3 kD = vec3(1.0) - kS;
			kD *= 1.0 -  metalness;
			
			vec3 numerator    = D * G * F;
			float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
			vec3 specular     = numerator / max(denominator, 0.001);

			//Lo += (((albedo / PI)) + specular) * radiance * cosTheta;
			Lo += ((kD * (albedo / PI)) + specular) * radiance * cosTheta;
		}
		vec3 ambient = vec3(0.03) * albedo * ao;
		vec3 colour = ambient + Lo;
			
		colour = colour / (colour + vec3(1.0));
		colour = pow(colour, vec3(1.0/2.2)); 
		
		gl_FragColor = vec4(colour, 1.0);
	}  

	float DistributionGGX(vec3 N, vec3 H, float roughness)
	{
	   float a = roughness * roughness;
	   float a2 = a * a;
	   float NdotH = max(dot(N, H), 0.0);
	   float NdotH2 = NdotH * NdotH;

	   float num = a2;
	   float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	   denom = PI * denom * denom;

	   return num / denom;
	}

	float GeometrySchlickGGX(float NdotV, float roughness)
	{
	   float r = (roughness + 1.0);
		float k = (r * r) / 8.0;

		float num = NdotV;
		float denom = NdotV * (1.0 - k) + k;

		return num / denom;
	}

	float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
	{
		float NdotV = max(dot(N, V), 0.0);
		float NdotL = max(dot(N, L), 0.0);
		float ggx2 = GeometrySchlickGGX(NdotV, roughness);
		float ggx1 = GeometrySchlickGGX(NdotL, roughness);

		return ggx1 * ggx2;
	}

	//vec3 fresnelSchlick(float cosTheta, vec3 F0)
	//{
	//	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
	//}
	
	vec3 fresnelSchlick(vec3 H, vec3 V, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - max(dot(H, V), 0.0), 5.0);
}
#endif