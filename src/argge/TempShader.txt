#ifdef VERTEX
attribute vec3 a_Position;
attribute vec2 a_TexCoord;
attribute vec3 a_Normal; 
attribute vec3 a_LightMapCoord;
attribute vec3 a_Tangent;
attribute vec3 a_Bitangent;

uniform mat4 u_Projection;
uniform mat4 u_Model;
uniform mat4 u_View;

uniform vec3 u_lightPos;
uniform vec3 u_lightColour;

struct pointLight
{
vec3 position;
vec3 colour;
};
uniform pointLight u_PointLights[4];
uniform vec3 u_CameraPos;


varying vec3 v_FragPos;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying pointLight v_PointLights[4];
varying vec3 v_CameraPos;

varying vec3 v_TanFragPos;
varying pointLight v_TanPointLights[4];
varying vec3 v_TanCameraPos;
varying mat3 v_TBN;


void main() 
{ 
gl_Position = u_Projection * u_View * u_Model  * vec4(a_Position, 1.0);


vec3 T = normalize(vec3(u_Model * vec4(a_Tangent, 0.0)));
vec3 B = normalize(vec3(u_Model * vec4(a_Bitangent, 0.0)));
vec3 N = normalize(vec3(u_Model * vec4(a_Normal,    0.0)));
mat3 TBN = transpose(mat3(T, B, N));
v_TBN = TBN;

v_FragPos = vec3(u_Model * vec4(a_Position, 1.0));
v_TexCoord = a_TexCoord ;
v_Normal = normalize(a_Normal);

for(int i = 0; i < 4; ++i) 
{
	v_PointLights[i].position =  u_PointLights[i].position;
	v_PointLights[i].colour = u_PointLights[i].colour;
	
	v_TanPointLights[i].position = TBN * u_PointLights[i].position;
	v_TanPointLights[i].colour = u_PointLights[i].colour;

}
v_CameraPos = u_CameraPos;
v_TanCameraPos = TBN * u_CameraPos;
v_TanFragPos = TBN * vec3(u_Model * vec4(a_Position, 1.0));


} 

#endif

#ifdef FRAGMENT
uniform sampler2D u_Albedo;
uniform sampler2D u_Ao;
uniform sampler2D u_Metallic;
uniform sampler2D u_Normal;
uniform sampler2D u_Roughness;
uniform sampler2D u_Height;

varying vec3 v_FragPos;
varying vec2 v_TexCoord;
varying vec3 v_Normal;

struct pointLight
{
vec3 position;
vec3 colour;
};
varying pointLight v_PointLights[4];

varying vec3 v_CameraPos;



const float PI = 3.14159265359;

varying vec3 v_TanFragPos;
varying pointLight v_TanPointLights[4];
varying vec3 v_TanCameraPos;


varying mat3 v_TBN;

float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlick(vec3 H, vec3 V, vec3 F0);

vec2 ParallaxMapping(vec2 texCoords, vec3 Wo);

void main()
{

vec3 Wo  = normalize(v_TanCameraPos - v_TanFragPos );
vec2 texCoords = ParallaxMapping(v_TexCoord, Wo);


vec3 albedo     = texture2D(u_Albedo, texCoords).rgb;
albedo.r          = pow(albedo.r,2.2f);
albedo.g          = pow(albedo.g,2.2f);
albedo.b          = pow(albedo.b,2.2f); 
vec3 normal     = texture2D(u_Normal, texCoords).rgb;
float ao        = texture2D(u_Ao, texCoords).r;
float metalness = texture2D(u_Metallic, texCoords).r;
float roughness = texture2D(u_Roughness, texCoords).r;

roughness = 1 - roughness;


vec3 N  = normalize(normal * 2.0 - 1.0 ); 
/* vec3 N = vec3(0.0,0.0,1.0); */
/*vec3 N = normalize(v_Normal); */
/*N = N * v_TBN; */
vec3 F0 = vec3(0.04);
F0      = mix(F0, albedo, metalness);

    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i) 
    {
		vec3 Wi = normalize(v_TanPointLights[i].position - v_TanFragPos );
		/*Lo += max(dot(Wi,N),0) * 0.1; */ 
		
		float cosTheta = max(dot(N, Wi), 0.0001);
		vec3 H = normalize(Wo + Wi);
		float distance    = length(v_TanPointLights[i].position - v_TanFragPos);
	    float attenuation = 1.0 / (distance * distance);
		vec3 radiance     = v_TanPointLights[i].colour * attenuation; 
		
		float D = DistributionGGX(N, H, roughness);   
	    float G   = GeometrySmith(N, Wo, Wi, roughness);   		
        vec3 F    = fresnelSchlick(H, Wo, F0);   
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1-  metalness;	
        vec3 numerator    = D * G * F;
        float denominator = 4.0 * max(dot(N, Wo), 0.0) * max(dot(N, Wi), 0.0);
        vec3 specular     = numerator / max(denominator, 0.001);

                        
        Lo += ((kD * (albedo / PI)) + specular) * radiance * cosTheta; 
		
			
	}

    vec3 ambient = vec3(0.03) * albedo * ao;
    vec3 colour = ambient + Lo;
		
    colour = colour / (colour + vec3(1.0));
    colour = pow(colour, vec3(1.0/2.2)); 
	gl_FragColor = vec4(colour, 1.0);
}

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
	float height_scale = 0.05; 
    /*float height =  texture2D(u_Height, texCoords).r; */
    float minLayers = 32.0;
	float maxLayers = 128.0;
	float numLayers = mix(maxLayers, minLayers, max(dot(vec3(0.0, 0.0, 1.0), viewDir), 0.0)); 
    float layerDepth = 1.0 / numLayers;
    float currentLayerDepth = 0.0;
    vec2 P = viewDir.xy * height_scale; 
    vec2 deltaTexCoords = P / numLayers;
	
	vec2  currentTexCoords     = texCoords;
	float currentDepthMapValue = 1.0 - texture2D(u_Height, currentTexCoords).r;
  
	while(currentLayerDepth < currentDepthMapValue)
	{
		
		currentTexCoords -= deltaTexCoords;
		currentDepthMapValue = 1.0 - texture2D(u_Height, currentTexCoords).r;  
		currentLayerDepth += layerDepth;  
	}
	
	vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

	float afterDepth  = currentDepthMapValue - currentLayerDepth;
	float beforeDepth = 1.0 - texture2D(u_Height, prevTexCoords).r - currentLayerDepth + layerDepth;
	 
	float weight = afterDepth / (afterDepth - beforeDepth);
	vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

	return finalTexCoords;    
} 

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a2     = roughness*roughness;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float nom    = a2;
    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness )
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - roughness) + roughness;
	
    return nom / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, roughness);
    float ggx2 = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(vec3 H, vec3 Wo, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - max(dot(H, Wo), 0.0), 5.0);
}

#endif